由浅入深，详解 ViewModel 的那些事
https://juejin.cn/post/7186680109384859706

引言
    关于 ViewModel ，Android 开发的小伙伴应该都非常熟悉，无论是新项目还是老项目，基本都会使用到。而 ViewModel 作为 JetPack 核心组件，其本身也更是承担着不可或缺的作用。
    因此，了解 ViewModel 的设计思想更是每个应用层开发者必不可缺的基本功。

    随着这两年 ViewModel 的逐步迭代，比如 SaveStateHandle 的加入等，ViewModel 也已经不是最初版本的样子。要完全理解其设计体系，往往也要伴随着其他组件的基础，所以并不是特别容易能被开发者吃透。
    故本篇将以最新视角开始，与你一起，用力一瞥 ViewModel 的设计原理。

本文对应的组件版本：
    Activity-ktx-1.5.1
    ViewModel-ktx-2.5.1

本篇定位中等，将从背景与使用方式开始，再到源码解读。由浅入深，解析 ViewModel 的方方面面。

学完本篇，你将了解或明白以下内容：
    ViewModel 的使用方式；
    SavedStateHandle 的使用方式；
    ViewModel 创建与销毁流程；
    SavedStateHandle 创建流程；
    好了，让我们开始吧! 🐊

基础概念
    在开始本篇前，我们先解释一些基础概念，以便更加清晰的了解后续的状态保存相关。

何谓配置变更?
    配置变更指的是，应用在运行时，内置的配置参数变更从而触发的Activity重新创建。
    常见的场景有：旋转屏幕、深色模式切换、屏幕大小变化、更改了默认语言或者时区、更改字体大小或主题颜色等。

何谓异常重建？
    异常重建指的是非配置变更情况下导致的 Activity 重新创建。
    常见场景大多是因为 内存不足，从而导致后台应用被系统回收 ，当我们切换到前台时，从而触发的重建，这个机制在Android中为 Low Memory Killer 机制，简称 LMK。
    可以在开发者模式，限制后台任务数为1，从而测试该效果。

ViewModel存在之前的世界
    在 ViewModel 出现之前,对于 View 逻辑与数据，我们往往都是直接存在 Activity 或者 Fragment 中，优雅一点，会细分到具体的单独类中去承载。当配置变更时，无可避免，会触发界面重绘。相应的，我们的数据在没有额外处理的情况下，往往也会被初始化，然后在界面重启时重新加载。
    但如果当前页面需要维护某些状态不被丢失呢，比如 选择、上传状态 等等? 此时问题就变得棘手起来。
    稍有经验同学会告诉你，在 onSaveInstanceState 中重写，使用bundle去存储相应的状态啊？➡️
    但状态如果少点还可以，多一点就非常头痛，更别提包含继承关系的状态保存。 😶‍🌫️
    所以，不出意外的话，我们 App 的 Activity-manifest 中通常默认都是下列写法:
    android:configChanges="keyboard|orientation|uiMode|..."
    这也是为啥Android程序普遍不支持屏幕旋转的一部分原因，从源头扼杀因部分配置变更导致的状态丢失问题。🐶保命

VideModel存在之后的世界
    随着 ViewModel 组件推出之后，上述因配置变更而导致的状态丢失问题就迎刃而解。
    ViewModel 可以做到在配置变更后依然持有状态。所以，在现在的开发中，我们开始将 View数据 与 逻辑 藏于 ViewModel 中，然后对外部暴漏观察者，比如我们常常会搭配 LiveData 一起使用，以此更容易的保持状态同步。
    关于 ViewModel 的生命周期，具体如下图所示：如图

    虽然 ViewModel 非常好用，但 ViewModel 也不是万能，其只能避免配置变更时避免状态丢失。比如如果我们的App是因为 内存不足 而被系统kill 掉，此时 ViewModel 也会被清除 🔺 。
    不过对于这种情况，仍然有以下三个方法可以依然保存我们的状态:
        重写 onSaveInstanceState() 与 onRestoreInstanceState();
        使用 SavedState,本质上其实还是 onSaveInstanceState() ；
        使用 SavedStateHandle ，本质上是依托于 SaveState 的实现;
        上述的后两种都是随着 JetPack 逐步被推出，可以理解为是对原有的onSavexx的封装简化，从而使其变得更易用。
    关于这三种方法，我们会在 SavedStateHandle 流程解析中再进行具体叙述，这里先提出来，留个伏笔。

ViewModel使用方式
    作为文章的开始，我们还是要先聊一聊 ViewModel 的使用方式，如下例所示:
        class MainActivity : AppCompatActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                val viewModel = ViewModelProvider(this).get(MainViewModel::class.java)
            }
        }
        class MainViewModel : ViewModel()

    当然，你也可以选择引入 activity-ktx ,从而以更简便的写法去写：
    implementation 'androidx.activity:activity-ktx:1.5.1'
    private val mainModel by viewModels<MainViewModel>()

    示例比较简单，我们创建了一个 ViewModel ，如上所示，并在 MainActivity 的 onCreate() 中进行了初始化。
    这也是我们日常的使用方式，具体我们这里就不再做阐述。

SavedStateHandle使用方式
    我们知道，ViewModel 可以处理因为配置更改而导致的的状态丢失，但并不保证异常终止的情况，而官方的 SavedStateHandle 正是用于这种情况的解决方式。
    SavedStateHandle ,如名所示，用于保存状态的手柄。再细化点就是，用于保存状态的工具，从而配合 ViewModel 而使用，其内部使用一个 map 保存我们要存储的状态，并且其本身使用 operator 重载了 set() 与 get() 方法，所以对于我们来说，可以直接使用 键值对 的形式去操作我们要保存的状态，这也是官方为什么称 SavedStateHandle 是一个 具有键值映射Map 特性的原因。

    在 Fragment1.2 及 Activity1.1.0 之后, SavedStateHandle 可以作为 ViewModel 的构造函数，从而反射创建带有 SavedStateHandle 的 ViewModel 。
        class MainActivity : AppCompatActivity() {
            private val viewModel by viewModels<MainViewModel>()
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                [配置变更后获取]
                val tag = viewModel.tag
            }

            fun saveTag() {
                viewModel.tag = "Main"
            }
        }

        class MainViewModel(private val state: SavedStateHandle) : ViewModel() {
            var tag: String
                get() = state["tag"] ?: rset(value) {
                    state["tag"] = value
                }
        }
    我们在 MainViewModel 构造函数中新增了一个参数 state:SavedStateHandle ,这个参数在 ViewModel 初始化时，会帮我们自动进行注入。从而我们可以利用 SavedStateHandle 以key-value的形式去保存一些 自定义状态 ,从而在进程异常终止，Act重建后，也能获取到之前保存的状态。
    至于为什么能实现保存状态呢？
    主要是因为 SavedStateHandle 内部默认有一个 SavedStateRegistry.SavedStateProvider 状态保存提供者对象，该对象会在我们创建ViewModel 时绑定到 SavedStateRegistry 中，从而在我们 Activity 异常重建时做到状态的 恢复 与 绑定 (通过重写 onSavexx() 与 onCreate() 方法监听)。
    关于这部分内容，我们下面的源码解析部分也会再聊到，这里我们只需要知道是这么回事即可。

/* 源码分析 */
    ✅ViewModelProvider(this).get(MainViewModel::class.java)
        ViewModelProvider(this)如下
        public constructor(owner: ViewModelStoreOwner)
        	: this(owner.viewModelStore, defaultFactory(owner), defaultCreationExtras(owner))
        相应的，这里开始，我们就涉及到了三个方面，即 viewModelStore 、 Factory、 Exras 。所以接下来我们就顺藤摸瓜，分别看看这三处的实现细节。

        1.owner.viewModelStore：ComponentActivity.class
            获取viewModelStore实例
            @NonNull
            @Override
            public ViewModelStore getViewModelStore() {
                if (getApplication() == null) {
                    throw new IllegalStateException("Your activity is not yet attached to the "
                            + "Application instance. You can't request ViewModel before onCreate call.");
                }
                ensureViewModelStore();
                return mViewModelStore;
            }

            void ensureViewModelStore() {
                if (mViewModelStore == null) {
                    //获取上一次的配置实例，如果不为null,则取出配置实例里面的viewModelStore
                    NonConfigurationInstances nc =
                            (NonConfigurationInstances) getLastNonConfigurationInstance();
                    if (nc != null) {
                        // Restore the ViewModelStore from NonConfigurationInstances
                        mViewModelStore = nc.viewModelStore;
                    }
                    //否则new ViewModelStore()
                    if (mViewModelStore == null) {
                        mViewModelStore = new ViewModelStore();
                    }
                }
            }
        而ViewModelStore 是负责维护我们 ViewModel 实例的具体类，
        内部有一个 map 的合集，用于保存我们创建的所有 ViewModel ，
        并对外提供了 clear() 方法，以 便于非配置变更时清除缓存 。

        2.defaultFactory(owner)
            该方法用于初始化 ViewModel 默认的创造工厂🏭 。
            默认有两个实现，前者是 HasDefaultViewModelProviderFactory ，也是我们 Fragment 或者 ComponentActivity 都默认实现的接口，而后者是是指全局  NewInstanceFactory 。
            两者的不同点在于，后者只能创建 空构造函数 的 ViewModel ，而前者没有这个限制。

        3.defaultCreationExtras(owner)
            用于辅助 ViewModel 初始化时需要传入的参数，
            默认有两个实现，前者是 HasDefaultViewModelProviderFactory ,也就是我们 ComponentActivity 实现的接口

            默认会帮我们注入 application 以及 intent 等，注意这里还默认使用了 getIntent().getExtras() 作为 ViewModel 的 默认状态 ，如果我们 ViewModel 构造函数中有 SavedStateHandle 的话。
            创建 ViewModel 的新方式，CreationExtras 了解一下？
                https://blog.csdn.net/vitaviva/article/details/123321254

    ✅get(ViewModel::xx)
        从缓存中获取现有的 ViewModel 或者 反射创建 新的 ViewModel。
        代码：

        当我们使用 get() 方法获取具体的 ViewModel 对象时，
        内部会先利用 当前包名+ViewModel类名 作为 key ，然后从 viewModelStore 中取。
        如果当前已创建，则直接使用；反之则调用我们的 ViewModel工厂 create() 方法创建新的 ViewModel。 创建完成后，并将其保存到 ViewModelStore 中。


    ✅销毁流程
        在初始化 ViewModelProvider 时，还记得我们需要传递的 ViewModelStoreOwner 吗？
        而这个接口正是被我们的 ComponentActivity 或者 Fragment 各自实现，相应的 ViewModelStore 也是存在于我们的 ComponentActivity 中，所以我们直接去看示例代码即可：
        以ComponentActivity为例，具体的源码如下：
            getLifecycle().addObserver(new LifecycleEventObserver() {
                @Override
                public void onStateChanged(@NonNull LifecycleOwner source,
                        @NonNull Lifecycle.Event event) {
                    if (event == Lifecycle.Event.ON_DESTROY) {
                        // Clear out the available context
                        mContextAwareHelper.clearAvailableContext();
                        // And clear the ViewModelStore
                        if (!isChangingConfigurations()) {
                            //这里
                            getViewModelStore().clear();
                        }
                    }
                }
            });
            在初始化Activity时，内部会使用 lifecycle 添加一个生命周期观察者，并监听 onDestory() 通知(Act销毁)，
            如果当前销毁的原因非配置更改导致，则调用 ViewModeltore.clear() ，即清空我们的ViewModel缓存列表，
            从而这也是为什么 ViewModel 不支持非配置更改的实例保存。

你可能会惊讶，那还怎么借助SavedStateHandle保存状态，viewModel已经被清空了啊🤔?
如果你记得 Activity 传统处理状态的方式，此时也就能理解为什么了？因为源头都是一个地方，而 SavedStateHandle 仅仅只是一个更简便的封装而已。不过关于这个问题具体解析，我们将在下面继续进行探讨，从而理解 SavedStateHandle 的完整流程。

/* SavedStateHandle流程解析 */
