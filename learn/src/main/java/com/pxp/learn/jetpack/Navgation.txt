1.浅谈 Android 架构导航 - Navigation的架构与设计
https://juejin.cn/post/7241184271318515773
2.Navigation源码解析及自定义FragmentNavigator详解
https://mp.weixin.qq.com/s/dB3WWqJUm_bCciLOAI_vtg

    支持 Activity，Fragmegnt，Dialog 跳转；
    支持跳转时数据的安全性，safeArgs 安全数据传递；
    自定义拓展 Navigation；
    支持深度链接 Deeplink，Deeplink 提供了页面直达的能力；
    支持可视化编辑，与 Android studio 绑定，提供了可视化编辑界面；
    回退堆栈管理，支持逐个出栈，也支持回到某个页面。
    使用步骤
        findNavController()
        //导航到Activity（目的地）
        navController.navigate(R.id.nav_activity)
        // 导航到Fragment
        navController.navigate(R.id.nav_fragment)
        // 导航到dialog
        navController.navigate(R.id.nav_dialog)
        //deepLink 实现页面直达能力
        navController.handleDeepLink(Intent())
        navController.navigateUp() //回退到上一个页面
        navController.popBackStack(int destinationId, boolean inclusive)

源码解析
    NavHostFragment
        ```
        @CallSuper
        @Override
        public void onCreate(@Nullable Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            final Context context = requireContext();

            // ✅构建NavHostController对象
                同时注册ActivityNavigator和NavGraphNavigator
            mNavController = new NavHostController(context);
            mNavController.setLifecycleOwner(this);
            // ✅设置返回键的Dispatcher，当点击了返回键后将事件分发
                通过lifecycle.addObserver，调用mOnBackPressedCallback中handleOnBackPressed()里面popBackStack()
            mNavController.setOnBackPressedDispatcher(requireActivity().getOnBackPressedDispatcher());
            // Set the default state - this will be updated whenever
            // onPrimaryNavigationFragmentChanged() is called
            mNavController.enableOnBackPressed(
                    mIsPrimaryBeforeOnCreate != null && mIsPrimaryBeforeOnCreate);
            mIsPrimaryBeforeOnCreate = null;
            mNavController.setViewModelStore(getViewModelStore());
            // ✅通过NavigatorProvider创建Navigator
                注册DialogFragmentNavigator
                注册FragmentNavigator
            onCreateNavController(mNavController);

            Bundle navState = null;
            if (savedInstanceState != null) {
                navState = savedInstanceState.getBundle(KEY_NAV_CONTROLLER_STATE);
                if (savedInstanceState.getBoolean(KEY_DEFAULT_NAV_HOST, false)) {
                    mDefaultNavHost = true;
                    requireFragmentManager().beginTransaction()
                            .setPrimaryNavigationFragment(this)
                            .commit();
                }
            }

            if (navState != null) {
                // Navigation controller state overrides arguments
                mNavController.restoreState(navState);
            }
            if (mGraphId != 0) {
                // ✅设置从 onInflate() 解析得到的mGraphId
                   setGraph里面setGraph(getNavInflater().inflate(graphResId), startDestinationArgs);
                   在onInflate()中mGraphId还有mDefaultNavHost
                // Set from onInflate()
                mNavController.setGraph(mGraphId);
            } else {
                // See if it was set by NavHostFragment.create()
                final Bundle args = getArguments();
                final int graphId = args != null ? args.getInt(KEY_GRAPH_ID) : 0;
                final Bundle startDestinationArgs = args != null
                        ? args.getBundle(KEY_START_DESTINATION_ARGS)
                        : null;
                if (graphId != 0) {
                    mNavController.setGraph(graphId, startDestinationArgs);
                }
            }
        }
        ```
    NavHostController
        继承NavController，调用构造函数创建
        public NavController(@NonNull Context context) {
            mContext = context;
            while (context instanceof ContextWrapper) {
                if (context instanceof Activity) {
                    mActivity = (Activity) context;
                    break;
                }
                context = ((ContextWrapper) context).getBaseContext();
            }
            // ✅注册了两个 Navigator:
                ActivityNavigator: 就是能够为 Activity 这种组件提供导航服务的 Navigator;
                NavGraphNavigator: 它是比较特殊的，就是当 mobile_navigation 这个资源文件加载完成之后用来启动 startDestination 的 id 对应的首页，后面还会继续讲到。
            // ✅之所以在这里实例化注册的原因，是因为一旦确定了 ActivityNavigator 和 NavGraphNavigator，
                Navigation 导航器就无法启动 Activity，同时也无法启动导航的首页，Activity 对于一个应用来说是不可或缺的，
                但是 Fragment 对于所有的应用来说不是必须的。所以 Fragment 类型的 Navigator 并没有在这里注册。那么它是在哪里注册的呢？
            mNavigatorProvider.addNavigator(new NavGraphNavigator(mNavigatorProvider));
            mNavigatorProvider.addNavigator(new ActivityNavigator(mContext));
        }

        setGraph(getNavInflater().inflate(graphResId), startDestinationArgs);
            NavInflater中inflate(graphResId)
                // ✅从给出的资源文件id解析出NavGraph
                public NavGraph inflate(@NavigationRes int graphResId) {
                    Resources res = mContext.getResources();
                    XmlResourceParser parser = res.getXml(graphResId);
                    final AttributeSet attrs = Xml.asAttributeSet(parser);
                    try {
                        String rootElement = parser.getName();
                        NavDestination destination = inflate(res, parser, attrs, graphResId);
                        //······
                        return (NavGraph) destination;
                    }
                }
                方法：private NavDestination inflate(@NonNull Resources res, @NonNull XmlResourceParser parser, @NonNull AttributeSet attrs, int graphResId)
                    里面：parser 根据名称获取 Navigator，创建 Destination;
                        dest.onInflate() 解析参数，解析不同类型节点的属性；
                        如果第一个创建的节点是 NavGraph，递归调用返回的节点就会被添加到 dest 里面；如果是 NavGraph 则直接添加 Destination。

        以上得到NavGraph
        @CallSuper
        public void setGraph(@NonNull NavGraph graph, @Nullable Bundle startDestinationArgs) {
            if (mGraph != null) {
                // Pop everything from the old graph off the back stack
                popBackStackInternal(mGraph.getId(), true);
            }
            mGraph = graph;
            // ✅里面Navigator.navigate(mGraph, startDestinationArgs, null, null);
            // ✅前面记得我们已经注册四种XXXNavGraphNavigator，其中就是存在mNavigatorProvider，从中找出对应Navigator
            // ✅怎么使用时我们使用findNavController找到对应NavController，navigate(resId)之后操作类似，在mNodes找到对应节点跳转
            // ✅至此我们已经跳转到第一个NavGraph
            onGraphCreated(startDestinationArgs);
        }

其他类型navigate......

总结
    1.首先需要一个承载页面的容器 NavHost，这个容器有个默认的实现 NavHostFragment，app:navGraph 加载导航图 xml；
    2.NavHostFragment 有个 NavController 对象，页面导航都是通过调用它的 navigate 方法实现跳转的；
    3.NavController 通过调用 setGraph() 方法，传入导航资源文件，通过 NavInflater 解析导航资源文件，获取导航资源文件中的节点以及属性，得到 NavGraph;
    4.NavController 内部通过 NavigatorProvider 管理这几种 navigator;
    5.NavController 内通过 mBackStack 管理回退栈，设置返回键的 Dispatcher 监听，popBackStack() 就可以做回退栈的相关操作;
    6.NavHostFragment 在 oncreate 方法中，NavController 添加了四个 navigator，分别是FragmentNavigator、ActivityNavigator、DialogFragmentNavigator、NavGraphNavigator，分别实现各自的 navigate 方法，进行页面切换。
    7.在 navigate 方法中，通过设置参数，action，动画等数据后，根据原生方式实现跳转指定页面，同时会把本次的节点添加到回退栈当中。

优点：
    给 Activity，Fragment，Dialog 提供导航能力的组件。
    导航时可携带参数，指定转场动画。
    支持deepline页面直达，fragment回退栈管理能力。

缺点：
    十分依赖XML文件，所有的节点都必须要在 mobile_navigation.xml文件中来定义，这是不够灵活，不利于模块化，组件化开发。
    Fragment 类型的节点来执行导航的时候使用的 replace() 方法会导致页面重新加载重走生命周期方法，不够友好。
    不支持导航过程的拦截和监听。







--------------------------------
/* 导航文件解析 */
NavHostFragment
    不是构造方法里面解析的，也不是在 Fragment 的 onCreate 方法中解析的，而是在 NavHostFragment 的 onInflate() 解析的。
    这个方法的入参也会有 AttributeSet 这个参数，从而能解析在布局中定义的属性。
    任何在布局文件当中声明的组件比如 view，Fragment 当它们在布局当中解析完成，创建成功之后都会回调到 onInflate() 这个方法，但是 Activity 和 Dialog 是没有这个方法的，因为它们还不支持在布局当中声明这两个组件。
    onCreate() 方法
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        final Context context = requireContext();

        // 1.构建NavHostController对象
        mNavController = new NavHostController(context);
        mNavController.setLifecycleOwner(this);
        //2. 设置返回键的Dispatcher，当点击了返回键后将事件分发
        mNavController.setOnBackPressedDispatcher(requireActivity().getOnBackPressedDispatcher());
        mNavController.enableOnBackPressed(
                mIsPrimaryBeforeOnCreate != null && mIsPrimaryBeforeOnCreate);
        mNavController.setViewModelStore(getViewModelStore());
        //3.通过NavigatorProvider创建Navigator
        onCreateNavController(mNavController);

        if (mGraphId != 0) {
            // 4.设置从 onInflate() 解析得到的mGraphId
            mNavController.setGraph(mGraphId);
        } else {
            if (graphId != 0) {
                mNavController.setGraph(graphId, startDestinationArgs);
            }
        }
    }
    主要做了四件事：
        首先构建了 NavHostController 对象；
        设置返回键的Dispatcher;
        通过 NavigatorProvider 创建 Navigator；
        设置从 onInflate() 解析得到的 mGraphId；
/* 导航节点创建 */

总结
首先需要一个承载页面的容器 NavHost，这个容器有个默认的实现 NavHostFragment，app:navGraph 加载导航图 xml；

NavHostFragment 有个 NavController 对象，页面导航都是通过调用它的 navigate 方法实现跳转的；

NavController 通过调用 setGraph() 方法，传入导航资源文件，通过 NavInflater 解析导航资源文件，获取导航资源文件中的节点以及属性，得到 NavGraph;

NavController 内部通过 NavigatorProvider 管理这几种 navigator;

NavController 内通过 mBackStack 管理回退栈，设置返回键的 Dispatcher 监听，popBackStack() 就可以做回退栈的相关操作;

NavHostFragment 在 oncreate 方法中，NavController 添加了四个 navigator，分别是FragmentNavigator、ActivityNavigator、DialogFragmentNavigator、NavGraphNavigator，分别实现各自的 navigate 方法，进行页面切换。

在 navigate 方法中，通过设置参数，action，动画等数据后，根据原生方式实现跳转指定页面，同时会把本次的节点添加到回退栈当中。
